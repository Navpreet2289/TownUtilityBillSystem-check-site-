@model TownUtilityBillSystem.Models.BillModel
@using TownUtilityBillSystem.Controllers

@{
    ViewBag.Title = "ShowBill";
    var country = "Denmark";
    var j = 0;
    var k = 0;
}

<style>
    .row .col-xs-4 {
        background-color: white;
        color: black;
    }

    mark {
        background-color: yellow;
        color: black;
    }
</style>

<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>

@if (Model.Bill == null)
{
    <h2><strong>Sorry, no data</strong></h2>
}
else
{
    <div class="container-fluid" id="testDiv">
        <div class="row">            
            <div class="col-xs-4" id="supplierData">
                <h4><strong>Supplier:</strong></h4>
                <h5 style="color:red"><strong>@Model.UtilitySupplierModel.UtilitySupplier.Name</strong></h5>
                <h5>@Model.UtilitySupplierModel.UtilitySupplier.Address</h5>
                <h5>Phone/Fax: @Model.UtilitySupplierModel.UtilitySupplier.Phone / @Model.UtilitySupplierModel.UtilitySupplier.Fax</h5>
                <a href="https://@Model.UtilitySupplierModel.UtilitySupplier.Site.ToString()" target="_blank">@Model.UtilitySupplierModel.UtilitySupplier.Site</a>
                <h5>Email: @Model.UtilitySupplierModel.UtilitySupplier.Email</h5>
                <h5>@Model.UtilitySupplierModel.UtilitySupplier.Bank (Account datails: @Model.UtilitySupplierModel.UtilitySupplier.AccountDetails)</h5>
            </div>

            <div class="col-xs-4" style="background-color:white" id="customerData">
                <h4><strong>Customer:</strong></h4>
                @if (Model.CustomerModel.Customer.Surname == null)
                {
                    <h5><strong>@Model.CustomerModel.Customer.Name</strong></h5>
                }
                else
                {
                    <h5><strong>@Model.CustomerModel.Customer.Surname @Model.CustomerModel.Customer.Name </strong></h5>
                }
                <h5>
                    @Model.CustomerModel.Customer.Address.Building.Number, @Model.CustomerModel.Customer.Address.Street.Name str.,
                    @Model.CustomerModel.Customer.Address.Town.Name, @country @Model.CustomerModel.Customer.Address.Index.Value
                </h5>
                <h5>Account #: @Model.CustomerModel.Customer.Account</h5>
                <h5>Phone: @Model.CustomerModel.Customer.Phone</h5>
                <h5>Email: @Model.CustomerModel.Customer.Email</h5>
                <h5>Type: @Model.CustomerModel.Customer.CustomerType.Name</h5>
                <h5>Square: @Model.CustomerModel.Customer.Address.Building.Square sq. m.</h5>
            </div>

            <div class="col-xs-4" id="supplierData">
                <br />
                @if (Model.CustomerModel.Customer.Address.Building.ImagePath != "")
                {                    
                    <img src=@Model.CustomerModel.Customer.Address.Building.ImagePath />
                }
            </div>
        </div>
        <hr />

        <div class="row">
            <div class="col-xs-6" id="utilityData">
                
                <img src=@Model.UtilitySupplierModel.UtilitySupplier.ImageIconPath style="width:200px"/>
                <br />
                <font size="5"><strong>Bill #@Model.Bill.Number </strong></font>                
                <h5><strong>Billing date: </strong>@Model.Bill.Date.Year.ToString()<text>-</text>@Model.Bill.Date.Month.ToString()<text>-</text>@Model.Bill.Date.Day.ToString()  </h5>
                <h5><strong>Period: <mark>@Model.Bill.Period</mark></strong></h5>
                <br />
                @for (int i = 0; i < Model.UtilityChargesChartData.Count; i++)
                {
                    if (Model.UtilityChargesChartData[i].UtilityCharges != 0)
                    {
                        <h5><strong>@Model.CustomerModel.Meters[i].MeterType.Utility.Name charges: @Model.UtilityChargesChartData[i].UtilityCharges @Model.Currency</strong></h5>
                    }
                }
                <br />
                <h4><strong>Total charges: <mark> @Model.Bill.Sum @Model.Currency.Name </mark></strong></h4>
                @if (@Model.Bill.Paid == true)
                {
                    <h5><strong>Paid: <mark>Yes</mark></strong></h5>
                }
                else
                {
                    <h5><strong>Paid: <mark>No</mark></strong></h5>
                }
            </div>

            <div class="col-xs-6" id="containerUtilitiesCharges" style="min-width: 310px; height: 400px; max-width: 600px; margin: 0 auto"></div>

        </div>
        <hr />
        <div class="row">
            @for (int i = 0; i < Model.CustomerModel.Meters.Count; i++, j++)
            {
                string nameContainer = "container" + i.ToString();

                if (Model.CustomerModel.Meters[i].ConsumedMonthValue != 0)
                {
                    decimal utilityCharges = (decimal)Model.CustomerModel.Meters[i].ConsumedMonthValue * (@Model.CustomerModel.Meters[i].MeterType.Utility.Price);
                    utilityCharges = Math.Round(utilityCharges, 2);

                    <div class="col-xs-4" id="utilityData">
                        <br />
                        <br />
                        <br />
                        @if (Model.CustomerModel.Meters[i].MeterType.Utility.ImageIconPath != "")
                        {
                            <img src=@Model.CustomerModel.Meters[i].MeterType.Utility.ImageIconPath style="width:auto; height:40px" />
                        }

                        <font color="red" size="5"> <strong>@Model.CustomerModel.Meters[i].MeterType.Utility.Name.ToUpper()</strong></font>
                        <h5>Meter number: <strong>@Model.CustomerModel.Meters[i].SerialNumber</strong></h5>
                        <h5>Meter type: @Model.CustomerModel.Meters[i].MeterType.Name</h5>
                        <h5>Period: @Model.Bill.Period</h5>

                        @if (Model.CustomerModel.Meters[i].MeterType.Utility.Id == 1 && Model.CustomerModel.Meters[i].ConsumedMonthValue > (float)Model.CustomerModel.Meters[i].MeterType.Utility.UsageForStandartPrice)
                        {
                            var usageWithBiggerPrice = (decimal)Model.CustomerModel.Meters[i].ConsumedMonthValue - Model.CustomerModel.Meters[i].MeterType.Utility.UsageForStandartPrice;
                            var utilityChargesWithPrices = (decimal)Model.CustomerModel.Meters[i].MeterType.Utility.UsageForStandartPrice * @Model.CustomerModel.Meters[i].MeterType.Utility.Price + usageWithBiggerPrice * @Model.CustomerModel.Meters[i].MeterType.Utility.BigUsagePrice;
                            usageWithBiggerPrice = Math.Round(usageWithBiggerPrice, 2);
                            utilityChargesWithPrices = Math.Round(utilityChargesWithPrices, 2);

                            <p>
                                Consumed: <strong>@Math.Round(Model.CustomerModel.Meters[i].MeterType.Utility.UsageForStandartPrice, 0) </strong> @Model.CustomerModel.Meters[i].MeterType.Utility.Unit.Name
                                x <strong>
                                    @Model.CustomerModel.Meters[i].MeterType.Utility.Price
                                </strong> @Model.Currency.Name + <br /> + <strong>
                                    @usageWithBiggerPrice
                                </strong> @Model.CustomerModel.Meters[i].MeterType.Utility.Unit.Name
                                x <strong> @Model.CustomerModel.Meters[i].MeterType.Utility.BigUsagePrice </strong> @Model.Currency.Name= <strong> @utilityChargesWithPrices </strong> @Model.Currency.Name;
                            </p>
                        }
                        else
                        {
                            var consumedMonthValue = @Model.CustomerModel.Meters[i].ConsumedMonthValue;
                            consumedMonthValue = (float)Math.Round(consumedMonthValue, 2);
                            <p>
                                Consumed: <strong> @consumedMonthValue </strong> @Model.CustomerModel.Meters[i].MeterType.Utility.Unit.Name
                                x <strong> @Model.CustomerModel.Meters[i].MeterType.Utility.Price </strong> @Model.Currency.Name = <strong> @utilityCharges </strong> @Model.Currency.Name;
                            </p>
                        }
                        @if (Model.CustomerModel.Meters[i].MeterType.Utility.Id == 3)
                        {
                            <img src=@Model.TempearatureIconPath style="width:auto; height:37px" />
                            <text>Month average temperature: </text>
                            <br />
                            <p style="text-indent:40px">@Model.Temperatures[0].MonthName: @Model.Temperatures[0].AverageValue °C</p>
                            <p style="text-indent:40px">@Model.Temperatures[1].MonthName: @Model.Temperatures[1].AverageValue °C</p>
                        }
                    </div>
                    <div id=@nameContainer class="col-xs-8" style="min-width: 310px; max-width: 100%; height: 320px; margin: 0 auto"></div>
                    <script language="javascript" type="text/javascript">
                        CreateUsageChart();

                        function CreateUsageChart() {
        var containerName = 'container' + '@j.ToString()';
        Highcharts.chart(containerName, {
            chart: {
                type: 'bar'
            },
            title: {
                text: '@Model.CustomerModel.Meters[j].MeterType.Utility.Name'+ ' consumption history'
            },
            xAxis: {
                categories: [
                    '@Model.CustomerModel.Meters[j].ChartData[0].MonthName',
                    '@Model.CustomerModel.Meters[j].ChartData[1].MonthName',
                    '@Model.CustomerModel.Meters[j].ChartData[2].MonthName',
                    '@Model.CustomerModel.Meters[j].ChartData[3].MonthName',
                    '@Model.CustomerModel.Meters[j].ChartData[4].MonthName',
                    '@Model.CustomerModel.Meters[j].ChartData[5].MonthName',
                    '@Model.CustomerModel.Meters[j].ChartData[6].MonthName',
                   ' @Model.CustomerModel.Meters[j].ChartData[7].MonthName',
                    '@Model.CustomerModel.Meters[j].ChartData[8].MonthName',
                    '@Model.CustomerModel.Meters[j].ChartData[9].MonthName',
                    ' @Model.CustomerModel.Meters[j].ChartData[10].MonthName',
                   ' @Model.CustomerModel.Meters[j].ChartData[11].MonthName',
                   ' @Model.CustomerModel.Meters[j].ChartData[12].MonthName'
                ],
                title: {
                        text: null
                },
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Value, ' + '@Model.CustomerModel.Meters[j].MeterType.Utility.Unit.Name',
                    align: 'high'
                },
                labels: {
                    overflow: 'justify'
                }
            },
            tooltip: {
                valueSuffix: ' @Model.CustomerModel.Meters[j].MeterType.Utility.Unit.Name'
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                    }
                }
            },
            legend: {
                enabled: false,
            },
            credits: {
                enabled: false
            },
            series: [{
                name: 'Value',
                data: [
                    @Model.CustomerModel.Meters[j].ChartData[0].Value,
                    @Model.CustomerModel.Meters[j].ChartData[1].Value,
                    @Model.CustomerModel.Meters[j].ChartData[2].Value,
                    @Model.CustomerModel.Meters[j].ChartData[3].Value,
                    @Model.CustomerModel.Meters[j].ChartData[4].Value,
                    @Model.CustomerModel.Meters[j].ChartData[5].Value,
                    @Model.CustomerModel.Meters[j].ChartData[6].Value,
                    @Model.CustomerModel.Meters[j].ChartData[7].Value,
                    @Model.CustomerModel.Meters[j].ChartData[8].Value,
                    @Model.CustomerModel.Meters[j].ChartData[9].Value,
                    @Model.CustomerModel.Meters[j].ChartData[10].Value,
                    @Model.CustomerModel.Meters[j].ChartData[11].Value,
                    @Model.CustomerModel.Meters[j].ChartData[12].Value
                ]
            }]
        });
    }
                    </script>
                    <hr />
                }
            }
        </div>
    </div>
    <a href="javascript:genPDF()" class="btn btn-link btn-large">
        <span class=" glyphicon glyphicon-save"></span> <strong> Download PDF</strong>
    </a>
    <br />
    <a href="javascript:history.go(-1)" class="btn btn-link btn-large">
        <span class=" glyphicon glyphicon-arrow-left"></span> <strong>Back to previous page</strong>
    </a>
}


<script type="text/javascript" src="~/Scripts/jspdf.min.js"></script>
<script type="text/javascript" src="~/Scripts/html2canvas.js"></script>
<script type="text/javascript">
                        function genPDF() {
                            html2canvas(document.getElementById("testDiv"), {
                                onrendered: function (canvas) {
                                    var img = canvas.toDataURL("image/png");
                                    var doc = new jsPDF();                                    
                                    var pdfDocName = "Bill_" + '@Model.Bill.Number' + "_" + '@Model.CustomerModel.Customer.Surname' + '@Model.CustomerModel.Customer.Name';
                                   doc.addImage(img, 'png', 10, 10, 200, 287);
                                   doc.save(pdfDocName);
                                }
                            });
                        }
</script>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script>
$(document).ready(function () {  Highcharts.chart('containerUtilitiesCharges', {
                        chart: {
                            plotBackgroundColor: null,
                            plotBorderWidth: 0,
                            plotShadow: false
                        },
                        title: {
                            text: 'Utilities<br>charges',
                            align: 'center',
                            verticalAlign: 'middle',
                            y: 40
                        },
                        tooltip: {
                            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                        },
                        plotOptions: {
                            pie: {
                                dataLabels: {
                                    enabled: true,
                                    distance: -50,
                                    style: {
                                        fontWeight: 'bold',
                                        color: 'white'
                                    }
                                },
                                startAngle: -90,
                                endAngle: 90,
                                center: ['50%', '75%']
                            }
                        },
                        series: [{
                            type: 'pie',
                            name: 'Value',
                            innerSize: '50%',
                            data: [
                                ['@Model.CustomerModel.Meters[k].MeterType.Utility.Name', @Model.UtilityChargesChartData[k++].UtilityCharges],
                                ['@Model.CustomerModel.Meters[k].MeterType.Utility.Name', @Model.UtilityChargesChartData[k++].UtilityCharges],
                                ['@Model.CustomerModel.Meters[k].MeterType.Utility.Name', @Model.UtilityChargesChartData[k++].UtilityCharges],
                                ['@Model.CustomerModel.Meters[k].MeterType.Utility.Name', @Model.UtilityChargesChartData[k++].UtilityCharges],
                                {
                                    name: 'Proprietary or Undetectable',
                                    y: 0.2,
                                    dataLabels: {
                                        enabled: false
                                    }
                                }
                            ]
                        }]
                        });
                        })
</script>

